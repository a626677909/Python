my_data = [['slashdot', 'USA', 'yes', 18, 'None'],
           ['google', 'France', 'yes', 23, 'Premium'],
           ['digg', 'USA', 'yes', 24, 'Basic'],
           ['kiwitobes', 'France', 'yes', 23, 'Basic'],
           ['google', 'UK', 'no', 21, 'Premium'],
           ['(direct)', 'New Zealand', 'no', 12, 'None'],
           ['(direct)', 'UK', 'no', 21, 'Basic'],
           ['google', 'USA', 'no', 24, 'Premium'],
           ['slashdot', 'France', 'yes', 19, 'None'],
           ['digg', 'USA', 'no', 18, 'None'],
           ['google', 'UK', 'no', 18, 'None'],
           ['kiwitobes', 'UK', 'no', 19, 'None'],
           ['digg', 'New Zealand', 'yes', 12, 'Basic'],
           ['google', 'UK', 'yes', 18, 'Basic'],
           ['kiwitobes', 'France', 'yes', 19, 'Basic']]


def divideset(rows, column, value):
    split_func = None
    if isinstance(value, int) or isinstance(value, float):
        split_func = lambda row: row[column] >= value
    else:
        split_func = lambda row: row[column] == value

    set1 = [row for row in rows if split_func(row)]
    set2 = [row for row in rows if not split_func(row)]
    return (set1, set2)

def uniquecounts(rows):
    results = {}
    for row in rows:
        r = row[len(row) - 1]
        if r not in results:results[r] = 0
        results[r] += 1
    return results

def ent(rows):
    total_nums = len(rows)
    dic = {}
    for row in rows:
        current_result = row[-1]
        if current_result not in dic.keys():
            dic[current_result] = 0
        dic[current_result] += 1
    ent = 0.0
    for item in dic.values():
        p = float(item)/total_nums
        ent -= p * log(p, 2)
    return ent

def info_gain(rows):
    features = len(rows[0]) - 1
    ent_origin  = ent(rows)
    best_gain = 0.0
    sum_ent = 0.0
    best_gain_num = -1
    for i in range(features):
        dic = {}
        for row in rows:
            current_result = row[-1]
            if current_result not in dic.keys():
                dic[current_result] = 0
            dic[current_result] += 1

        for items, values in dic.items():
            set_items = divideset(rows, i, items)
            ent_items = ent(set_items)
            sum_ent +=  (values/features)* ent_items
        gain = ent_origin - sum_ent
        if(gain > best_gain):
            best_gain = gain
            best_gain_num = i
    return (best_gain, best_gain_num)
